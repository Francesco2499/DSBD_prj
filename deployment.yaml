#zookeper-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          ports:
            - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
    - port: 2181
  selector:
    app: zookeeper
---
# kafka-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka:2.12-2.5.1
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  ports:
    - port: 9092
  selector:
    app: kafka
---
# db-customer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-customer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-customer
  template:
    metadata:
      labels:
        app: db-customer
    spec:
      containers:
      - name: db-customer
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: dsbd_customer
        volumeMounts:
        - name: customer-persistent-storage
          mountPath: /var/lib/mysql

      volumes:
      - name: customer-persistent-storage
        persistentVolumeClaim:
          claimName: db-customer-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-customer-service
spec:
  selector:
    app: db-customer
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
# db-category-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-category
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-category
  template:
    metadata:
      labels:
        app: db-category
    spec:
      containers:
      - name: db-category
        image: mysql:latest
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: dsbd_category
        volumeMounts:
        - name: category-persistent-storage
          mountPath: /var/lib/mysql

      volumes:
      - name: category-persistent-storage
        persistentVolumeClaim:
          claimName: db-category-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-category-service
spec:
  selector:
    app: db-category
  ports:
    - protocol: TCP
      port: 3307
      targetPort: 3306
---
# customer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer
  template:
    metadata:
      labels:
        app: customer
    spec:
      containers:
      - name: customer
        image: dsbdproject/dsbd_prj-customer:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
        - name: MYSQL_HOST
          value: db-customer-service
        - name: MYSQL_DATABASE
          value: dsbd_customer
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: AUTH_URL
          value: http://authentication-service:5002/authenticate
---
apiVersion: v1
kind: Service
metadata:
  name: customer-service
spec:
  selector:
    app: customer
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
# category-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: category
spec:
  replicas: 1
  selector:
    matchLabels:
      app: category
  template:
    metadata:
      labels:
        app: category
    spec:
      containers:
      - name: category
        image: dsbdproject/dsbd_prj-category:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
        - name: MYSQL_HOST
          value: db-category-service
        - name: MYSQL_DATABASE
          value: dsbd_category
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_PORT
          value: "3307"
        - name: AUTH_URL
          value: http://authentication-service:5002/verify_token
---
apiVersion: v1
kind: Service
metadata:
  name: category-service
spec:
  selector:
    app: category
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
---
# authentication-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentication
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentication
  template:
    metadata:
      labels:
        app: authentication
    spec:
      containers:
      - name: authentication
        image: dsbdproject/dsbd_prj-authentication:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: authentication-service
spec:
  selector:
    app: authentication
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5002
---
# apigateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apigateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apigateway
  template:
    metadata:
      labels:
        app: apigateway
    spec:
      containers:
      - name: apigateway
        image: dsbdproject/dsbd_prj-apigateway:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
        - name: CUSTOMER_URL
          value: "http://customer-service:5000/customers"
        - name: CATEGORY_URL
          value: "http://category-service:8082/categories"
---
apiVersion: v1
kind: Service
metadata:
  name: apigateway-service
spec:
  selector:
    app: apigateway
  ports:
    - protocol: TCP
      port: 8090
      targetPort: 8090
      apiVersion: v1
  type: LoadBalancer
---
# publisher-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: publisher
spec:
  replicas: 1
  selector:
    matchLabels:
      app: publisher
  template:
    metadata:
      labels:
        app: publisher
    spec:
      containers:
        - name: publisher
          image: dsbdproject/dsbd_prj-publisher:latest
          command: ["python", "main.py"]
          env:
            - name: IS_TEST
              value: "true"
            - name: isDocker
              value: "true"
            - name: NEWS_URL
              value: "https://newsapi.org/v2/top-headlines"
            - name: NEWS_API_KEY
              value: "b67fa3203a504b90bd2f6297ff8aab73"
      ports:
        - containerPort: 5001
---
apiVersion: v1
kind: Service
metadata:
  name: publisher-service
spec:
  selector:
    app: publisher
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5001
---
# subscriber-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscriber
spec:
  replicas: 1
  selector:
    matchLabels:
      app: subscriber
  template:
    metadata:
      labels:
        app: subscriber
    spec:
      containers:
        - name: subscriber
          image: dsbdproject/dsbd_prj-subscriber:latest
          command: ["python", "main.py"]
          envFrom:
            - configMapRef:
                name: subscriber-config
      ports:
        - containerPort: 5003
---
apiVersion: v1
kind: Service
metadata:
  name: subscriber
spec:
  ports:
    - port: 5003
  selector:
    app: subscriber
---
#PV e PVC for customer service
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-customer-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/path/to/db-customer-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-customer-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
#PV e PVC for category service
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-category-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/path/to/db-category-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-category-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi

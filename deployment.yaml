#zookeper-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          ports:
            - containerPort: 2181
          env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: '2181'
          - name: ZOOKEEPER_TICK_TIME
            value: '2000'
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
    - port: 2181
  selector:
    app: zookeeper
---
# kafka-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-broker
  template:
    metadata:
      labels:
        app: kafka-broker
    spec:
      containers:
        - name: kafka-broker
          image: confluentinc/cp-kafka:latest
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka0:9092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://:9092
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: PLAINTEXT
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS
              value: "600000"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: '1'
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_CREATE_TOPICS
              value: "general_topic:2:1,sports_topic:2:1,science_topic:2:1,technology_topic:2:1"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka0
spec:
  selector:
    app: kafka-broker
  ports:
    - port: 9092
      targetPort: 9092
---
# db-customer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-customer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-customer
  template:
    metadata:
      labels:
        app: db-customer
    spec:
      containers:
      - name: db-customer
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: dsbd_customer
        volumeMounts:
        - name: customer-persistent-storage
          mountPath: /var/lib/mysql

      volumes:
      - name: customer-persistent-storage
        persistentVolumeClaim:
          claimName: db-customer-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-customer-service
spec:
  selector:
    app: db-customer
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
# db-category-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-category
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-category
  template:
    metadata:
      labels:
        app: db-category
    spec:
      containers:
      - name: db-category
        image: mysql:latest
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: dsbd_category
        volumeMounts:
        - name: category-persistent-storage
          mountPath: /var/lib/mysql

      volumes:
      - name: category-persistent-storage
        persistentVolumeClaim:
          claimName: db-category-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-category-service
spec:
  selector:
    app: db-category
  ports:
    - protocol: TCP
      port: 3307
      targetPort: 3306
---
# customer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer
  template:
    metadata:
      labels:
        app: customer
    spec:
      containers:
      - name: customer
        image: dsbdproject/dsbd_prj-customer:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
        - name: MYSQL_HOST
          value: db-customer-service
        - name: MYSQL_DATABASE
          value: dsbd_customer
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: AUTH_URL
          value: http://authentication-service:5002/authenticate
---
apiVersion: v1
kind: Service
metadata:
  name: customer-service
spec:
  selector:
    app: customer
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
# category-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: category
spec:
  replicas: 1
  selector:
    matchLabels:
      app: category
  template:
    metadata:
      labels:
        app: category
    spec:
      containers:
      - name: category
        image: dsbdproject/dsbd_prj-category:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
        - name: MYSQL_HOST
          value: db-category-service
        - name: MYSQL_DATABASE
          value: dsbd_category
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_PORT
          value: "3307"
        - name: AUTH_URL
          value: http://authentication-service:5002/verify_token
---
apiVersion: v1
kind: Service
metadata:
  name: category-service
spec:
  selector:
    app: category
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
---
# authentication-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentication
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentication
  template:
    metadata:
      labels:
        app: authentication
    spec:
      containers:
      - name: authentication
        image: dsbdproject/dsbd_prj-authentication:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: authentication-service
spec:
  selector:
    app: authentication
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5002
---
# apigateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apigateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apigateway
  template:
    metadata:
      labels:
        app: apigateway
    spec:
      containers:
      - name: apigateway
        image: dsbdproject/dsbd_prj-apigateway:latest
        command: ['python', 'main.py']
        env:
        - name: isDocker
          value: "true"
        - name: CUSTOMER_URL
          value: "http://customer-service:5000/customers"
        - name: CATEGORY_URL
          value: "http://category-service:8082/categories"
        - name: PUBLISHER_URL
          value: http://publisher-service:5001/publish_news
        - name: SUBSCRIBER_URL
          value: http://subscriber-service:5003/subscribe
---
apiVersion: v1
kind: Service
metadata:
  name: apigateway-service
spec:
  selector:
    app: apigateway
  ports:
    - protocol: TCP
      port: 8090
      targetPort: 8090
  type: LoadBalancer
---
# publisher-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: publisher
spec:
  replicas: 1
  selector:
    matchLabels:
      app: publisher
  template:
    metadata:
      labels:
        app: publisher
    spec:
      containers:
        - name: publisher
          image: dsbdproject/dsbd_prj-publisher:latest
          ports:
            - containerPort: 5001
          command: ["python", "main.py"]
          env:
            - name: IS_TEST
              value: "true"
            - name: isDocker
              value: "true"
            - name: NEWS_URL
              value: "https://newsapi.org/v2/top-headlines"
            - name: NEWS_API_KEY
              value: "b67fa3203a504b90bd2f6297ff8aab73"
---
apiVersion: v1
kind: Service
metadata:
  name: publisher-service
spec:
  selector:
    app: publisher
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001
---
# subscriber-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscriber
spec:
  replicas: 1
  selector:
    matchLabels:
      app: subscriber
  template:
    metadata:
      labels:
        app: subscriber
    spec:
      containers:
        - name: subscriber
          image: dsbdproject/dsbd_prj-subscriber:latest
          ports:
          - containerPort: 5003
          command: ["python", "main.py"]
          env:
            - name: isDocker
              value: "true"
            - name: SENDINBLUE_API_KEY
              value: "Insert Apikey"
            - name: CATEGORY_URL
              value: "http://category-service:8082/categories/preferences?category-name="
---
apiVersion: v1
kind: Service
metadata:
  name: subscriber-service
spec:
  ports:
    - port: 5003
  selector:
    app: subscriber
---
#PV e PVC for customer service
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-customer-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/path/to/db-customer-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-customer-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
#PV e PVC for category service
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-category-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/path/to/db-category-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-category-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadvisor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cadvisor
  template:
    metadata:
      labels:
        app: cadvisor
    spec:
      containers:
      - name: cadvisor
        image: google/cadvisor:latest
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: rootfs-volume
          mountPath: /rootfs
          readOnly: true
        - name: var-run-volume
          mountPath: /var/run
        - name: sys-volume
          mountPath: /sys
          readOnly: true
        - name: docker-volume
          mountPath: /var/lib/docker
          readOnly: true
        - name: machine-id-volume
          mountPath: /etc/machine-id
      volumes:
      - name: rootfs-volume
        hostPath:
          path: /
      - name: var-run-volume
        hostPath:
          path: /var/run
      - name: sys-volume
        hostPath:
          path: /sys
      - name: docker-volume
        hostPath:
          path: /var/lib/docker
      - name: machine-id-volume
        hostPath:
          path: /etc/machine-id
---
apiVersion: v1
kind: Service
metadata:
  name: cadvisor-service
spec:
  selector:
    app: cadvisor
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'apigateway'
        static_configs:
          - targets: ['apigateway-service:8090']

      - job_name: 'cadvisor'
        static_configs:
          - targets: ['cadvisor-service:8080']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus

      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  selector:
    app: prometheus
  ports:
  - protocol: TCP
    port: 9090
    targetPort: 9090
  type: NodePort
---
#PV e PVC for slamanager service
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-slamanager-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/path/to/db-slamanager-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-slamanager-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
# db-slamanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-slamanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-slamanager
  template:
    metadata:
      labels:
        app: db-slamanager
    spec:
      containers:
      - name: db-slamanager
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
        - name: MYSQL_DATABASE
          value: dsbd_slamanager
        volumeMounts:
        - name: slamanager-persistent-storage
          mountPath: /var/lib/mysql

      volumes:
      - name: slamanager-persistent-storage
        persistentVolumeClaim:
          claimName: db-slamanager-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-slamanager-service
spec:
  selector:
    app: db-slamanager
  ports:
    - protocol: TCP
      port: 3308
      targetPort: 3306
---
# slamanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: slamanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: slamanager
  template:
    metadata:
      labels:
        app: slamanager
    spec:
      containers:
        - name: slamanager
          image: dsbdproject/dsbd_prj-slamanager:latest
          ports:
            - containerPort: 5003
          command: ["python", "main.py"]
          env:
            - name: isDocker
              value: "true"
            - name: MYSQL_HOST
              value: db-slamanager-service
            - name: MYSQL_DATABASE
              value: slamanager
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_PORT
              value: "3308"
            - name: PROMETHEUS_URL
              value: http://prometheus-service:9090
---
apiVersion: v1
kind: Service
metadata:
  name: slamanager-service
spec:
  selector:
    app: slamanager
  ports:
  - protocol: TCP
    port: 5005
    targetPort: 5005
  type: NodePort
